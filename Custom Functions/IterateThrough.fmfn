/*
 *  CUSTOM FUNCTION
 *    IterateThrough ( listOrArrayOrObject; thisVariableName; iterationVariableName )
 *
 *  DESCRIPTION
 *    To be used in the "Exit Loop If" Script step and will return true or false
 *
 *  PARAMS
 *    listOrArrayOrObject: The variable that contains the list or array or object to iterate through
 *    thisVariableName (optional): The name of the variable to set this current iteration variable to. If nothing passed, will use $thisValue
 *    iterationVariableName (optional): The name of the variable to use to count through the list. If nothing passed, will use $i. Clears after last iteration
 *
 *  RETURNS
 *    True or False
 *
 *  DEPENDENCIES
 *    Preferable to have FileMaker 19.5+
 *    FileMaker 16+ required
 *
 *  CHANGELOG
 *    2022-03-28: Paul McCudden: Created
 *    2022-07-07: Paul McCudden: Updated to work with arrays and objects
 *    2023-08-11: Paul McCudden: $ not needed in variable name declaration
 *    2023-09-29: Paul McCudden: Added backward compatibility for v16+
 *    2024-03-06: Paul McCudden: Added in ~listOrArrayOrObjectEscaped to allow for evaluating of JSONGetElementType work better
 *    2024-03-20: Paul McCudden & Kully: Fixed bug where a json contained \"
*/

If ( GetAsNumber ( Get ( ApplicationVersion ) ) < 16; "This function requires FileMaker version 16+";
    Let (
        [
            thisVariableName = If ( IsEmpty ( thisVariableName ); "$thisValue"; If ( Left ( thisVariableName; 1 ) <> "$"; "$" ) & thisVariableName );
            iterationVariableName = If ( IsEmpty ( iterationVariableName ); "$i"; If ( Left ( iterationVariableName; 1 ) <> "$"; "$" ) & iterationVariableName );

            ~listOrArrayOrObjectEscaped = Quote ( listOrArrayOrObject );
            ~listType = If ( GetAsNumber ( Get ( ApplicationVersion ) ) < 19.5; 
                // Don't have access to JSONGetElementType - there are better ways to check JSONType, but don't want to use dependancies
                Case (
                    Left ( JSONFormatElements ( listOrArrayOrObject ); 1 ) = "?"; "list";
                    Left ( listOrArrayOrObject; 1 ) = "[" and Right ( listOrArrayOrObject; 1 ) = "]"; "array";
                    Left ( listOrArrayOrObject; 1 ) = "{" and Right ( listOrArrayOrObject; 1 ) = "}"; "object";
                    ""
                );
                // Do have access to JSONGetElementType - use evaluate to hide <Function Missing> in v19.4-
                Case (
                    Left ( JSONFormatElements ( listOrArrayOrObject ); 1 ) = "?"; "list";
                    Evaluate ( "JSONGetElementType ( " & ~listOrArrayOrObjectEscaped & " ; \"\" ) = JSONArray" ); "array";
                    Evaluate ( "JSONGetElementType ( " & ~listOrArrayOrObjectEscaped & " ; \"\" ) = JSONObject"); "object";
                    ""
                )
            );
            ~newIteration = Evaluate ( iterationVariableName ) + 1;
            ~exitLoop = ~newIteration > ValueCount ( If ( ~listType = "list"; listOrArrayOrObject; JSONListKeys ( listOrArrayOrObject; "" ) ) );
            ~newIteration = If ( ~exitLoop; ""; ~newIteration );
            ~newVariableValue = If ( ~exitLoop; ""; Case (
                ~listType = "list"; GetValue ( listOrArrayOrObject; ~newIteration );
                ~listType = "array"; JSONGetElement ( listOrArrayOrObject; "[" & ~newIteration - 1 & "]" );
                ~listType = "object"; GetValue ( JSONListKeys ( listOrArrayOrObject; "" ); ~newIteration )
            ) );
            ~letStatement = "Let([" & thisVariableName & "=\"" &
                Substitute ( ~newVariableValue
                    ;[Char(8220); "\\\""] // Opening double quote: “
                    ;[Char(8221); "\\\""] // Closeing double quote: ”
                    ;["\\"; "\\\\"]
                    ;["\""; "\\\""]
                ) & "\";" & iterationVariableName & "=\"" & ~newIteration & "\"];" & ~exitLoop & ")"
        ];

        Evaluate ( ~letStatement )

    )
)