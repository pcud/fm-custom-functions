/*
 *  CUSTOM FUNCTION
 *    TimeRounder ( theTime; toTheNearest )
 *
 *  DESCRIPTION
 *    Rounds the time to the nearest passed value
 *
 *  PARAMS
 *    theTime: the time to round
 *    toTheNearest: the nearest value to round to
 *
 *  RETURNS
 *    Time
 *
 *  DEPENDENCIES
 *    --NONE--
 *
 *  CHANGELOG
 *    2022-02-25: Paul McCudden: Created
 *    2024-09-11: Paul McCudden: Updated to include date if one is passed
 *
*/

Let (
  [
    ~date = GetAsDate ( theTime );
    ~time = GetAsTime ( theTime );
    ~timeAsNumber = GetAsNumber ( GetAsTime ( theTime ) );
    ~nearest = GetAsNumber ( toTheNearest );
    ~min = Mod ( ~timeAsNumber; 3600 );
    ~rounded = GetAsTime ( Case (
      ~timeAsNumber = "?"; "0";
      ~nearest = 0; "0";
      ~time - ~min + Round ( ~min / 60 / ~nearest; 0 ) * 60 * ~nearest
    ) )
  ];

  Case (
    ~time = "?"; Evaluate ( "Factorial ( -1 )" ); // If there is no time, simulate an error
    ~date = "?"; ~rounded;
    Timestamp ( ~date; ~rounded )
  )
  
)