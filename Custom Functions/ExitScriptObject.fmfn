/*
 *  CUSTOM FUNCTION
 *    ExitScriptObject ( additionalJSON )
 *
 *  DESCRIPTION
 *    Has the default JSONObject that should be the contain the data sent back on the exit script step
 *
 *  PARAMS
 *    additonalJSON: More json that you wish to include in the object
 *
 *  RETURNS
 *    Object
 *
 *  DEPENDENCIES
 *    JSONGetElementTypeExtended: https://github.com/pcud/fm-custom-functions/blob/master/Custom%20Functions/JSONGetElementTypeExtended.fmfn
 *    JSONDeepMergeObjects: https://github.com/pcud/fm-custom-functions/blob/master/Custom%20Functions/JSONDeepMergeObjects.fmfn
 *
 *  CHANGELOG
 *    2022-12-05: Paul McCudden: Created
 *    2023-12-28: Paul McCudden: Updated to have "error" and "message" and use JSONGetElementTypeExtended for better JSON typing for "return"
 *    2024-03-26: Paul McCudden: Updated to work with using GetScriptResultPSOS
 *    2024-06-11: Paul McCudden: Added in additionalJSON nesting into the return variable if "return" isn't passed
 *
*/

Let (
    [
        ~jsonToAdd = If ( Left ( JSONFormatElements ( additionalJSON ); 1 ) = "?"; "{}"; additionalJSON );
        
        // Assume that if there isn't a return key, everything should be a child of return
        ~jsonToAdd = Case (
            IsEmpty ( FilterValues ( JSONListKeys ( ~jsonToAdd; "" ); "return" ) ) and ~jsonToAdd <> "{}";
                JSONSetElement ( "{}"; "return"; ~jsonToAdd; JSONGetElementTypeExtended ( ~jsonToAdd; "") );
            ~jsonToAdd
        );

        // error and message might be nested in $return, check for that and set it to work with the other custom functions
        // Prioritize what's in return for backwards compatibility
        ~returnIsObject = JSONGetElementType ( $return; "" ) = JSONObject;
        ~error = If ( ~returnIsObject; JSONGetElement ( $return; "error" ) );
        ~message = If ( ~returnIsObject; JSONGetElement ( $return; "message" ) );
        ~error = Case (
            ~returnIsObject and not IsEmpty ( ~error ); ~error;
            not IsEmpty ( $error ); $error;
        );
        ~message = Case (
            ~returnIsObject and not IsEmpty ( ~message ); ~message;
            not IsEmpty ( $message ); $message;
        )
    ];

    // If the child script is a script with the same name, just exit with the information in $return
    If ( JSONGetElement ( $return; "script" ) = Get ( ScriptName );
        $return;
        JSONDeepMergeObjects ( 
            JSONSetElement ( "{}"
                ;["return"; $return; JSONGetElementTypeExtended ( $return; "")]
                ;["file"; Get ( FileName ); JSONString]
                ;["script"; Get ( ScriptName ); JSONString]
                ;["errorData"; ErrorGetMinimalInfo; JSONArray]
                ;["error"; ~error; JSONString] // JSONString instead of JSONumber in case it's a non-standard error
                ;["message"; ~message; JSONString]
            );
            ~jsonToAdd
        )
    )

)