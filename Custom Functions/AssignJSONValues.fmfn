/*
 *  CUSTOM FUNCTION
 *    AssignJSONValues ( params )
 *
 *  DESCRIPTION
 *    Assigns what is stored in params as FileMaker variables
 *
 *  PARAMS
 *    params: A JSON object that contains the param name as the key and param value as the value
 *
 *  RETURNS
 *    Boolean
 *
 *  DEPENDENCIES
 *    --NONE--
 *
 *  CHANGELOG
 *    2022-02-07: Paul McCudden (paul@peak14.solutions): Created
 *    2022-06-16: Paul McCudden (paul@peak14.solutions): Update to loop if necessary
 *    2022-09-11: Paul McCudden (paul@peak14.solutions): Have it unformat the JSON to make it not run into parse errors
 *    2022-12-23: Paul McCudden (paul@peak14.solutions): Updated script to catch multiple different quote characters ("“”)
 *    2023-01-30: Paul McCudden (paul@peak14.solutions): Updated substitute method to handle "," better
 *    2023-02-06: Paul McCudden (paul@peak14.solutions): Updated to handle "¶" better
 *    2023-03-24: Paul McCudden (paul@peak14.solutions): Updated to handle "\" better
 *    2024-03-20: Paul McCudden: Updated opening and closing quotes to use char to be better copy/paste proof
*/

Let (
    [
        ~params = If ( IsEmpty ( params ); Get ( ScriptParameter ); params );
        ~params = If ( Left ( JSONFormatElements ( ~params ); 1 ) = "?"; "{}"; ~params );
        ~params = JSONDeleteElement ( ~params; Get ( UUID ) )
    ];

    // Only use substitute method if can't use While() method since it's riskier with unexpected characters
    If ( GetAsNumber ( Get ( ApplicationVersion ) ) < 18;
        Let (
            [
                ~unique = Get ( UUID );
                ~params = ~unique & ¶ & ~params & ¶ & ~unique
            ];

            Evaluate ( "Let([¶" & Substitute ( JSONFormatElements ( ~params );
                // Strip out uneeded json wrappers and seperate each variable onto it's own line
                ["{¶"; ""];
	            ["¶}"; ""];
	            [",¶"; "¶"];

                // Format each line to have the proper syntax
                [Char(9) & "\""; Char(9) & "$"];
                ["\" :"; " ="];
                [Char(8220); "\\\""]; // Opening double quote: “
                [Char(8221); "\\\""]; // Clsoing double quote: ”

                // Eliminate any empty lines
                ["¶¶"; ¶ & ~unique & ¶];
                ["¶¶"; ¶ & ~unique & ¶];
                [~unique & ¶; ""];
                [¶ & ~unique; ""];
                [~unique; ""];

                // Format each line for the let request
                [¶; ";¶"];
                ["\\r"; "\¶"];
                ["¶"; "\¶"]
            ) & "¶];\"Used Substitute Method\")" )
        );

        While (
            [
                ~paramList = JSONListKeys ( ~params; "" );
                ~paramCount = ValueCount ( ~paramList );
                ~i = 0;
                ~setVariable = "";
                ~statementList = ""
            ];

            ~i < ~paramCount;
            
            [
                ~i = ~i + 1;
                ~thisParam = GetValue ( ~paramList; ~i );
                ~thisValue = Substitute ( JSONGetElement ( ~params; ~thisParam );
                    ["\\"; "\\\\"];
                    ["\""; "\\\""];
                    ["\“"; "\\\""];
                    ["\”"; "\\\""];
                    ["\\r"; "\¶"];
                    ["¶"; "\¶"]
                );
                ~thisParam = If ( Left ( ~thisParam; 1 ) <> "$"; "$") & ~thisParam;
                ~setVariable = Evaluate ( "Let([" & ~thisParam & "=\"" & ~thisValue & "\"];1)" )
            ];

            "Used While Method"
        )

    )

)

